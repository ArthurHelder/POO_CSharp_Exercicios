using System;

class Program
{
    static void Main()
    {
        // Criando uma nova conta bancária
        ContaBancaria conta = new ContaBancaria("12345", "João Silva");

        // Realizando depósitos e saques
        conta.Depositar(1000);
        conta.Sacar(200);

        // Exibindo extrato das transações
        Console.WriteLine("Extrato da Conta:");
        foreach (var transacao in conta.VerExtrato())
        {
            Console.WriteLine($"{transacao.DataHora}: {transacao.Tipo} de {transacao.Valor} - {transacao.Descricao}");
        }
    }
}

using System;
using System.Collections.Generic;

// A classe ContaBancaria foi criada com base no princípio de encapsulamento. O saldo da conta
// é protegido e pode ser modificado apenas por meio dos métodos de depósito e saque.
public class ContaBancaria
{
    private decimal _saldo;
    private string _numeroConta;
    private string _titular;
    private List<Transacao> _transacoes;

    public string NumeroConta => _numeroConta; // Propriedade somente leitura
    public string Titular => _titular; // Propriedade somente leitura
    public decimal Saldo => _saldo; // Propriedade somente leitura

    // Construtor para inicializar a conta com os dados necessários
    public ContaBancaria(string numeroConta, string titular)
    {
        _numeroConta = numeroConta;
        _titular = titular;
        _transacoes = new List<Transacao>();
        _saldo = 0; // Inicializa saldo com 0
    }

    // Método para depositar um valor na conta, com validação para valores negativos
    public void Depositar(decimal valor)
    {
        if (valor <= 0)
            throw new ArgumentException("O valor de depósito deve ser positivo.");
        _saldo += valor;
        _transacoes.Add(new Transacao(DateTime.Now, TipoTransacao.Deposito, valor, "Depósito realizado"));
    }

    // Método para sacar um valor da conta, com validação de saldo suficiente
    public void Sacar(decimal valor)
    {
        if (valor <= 0)
            throw new ArgumentException("O valor de saque deve ser positivo.");
        if (_saldo < valor)
            throw new InvalidOperationException("Saldo insuficiente.");
        _saldo -= valor;
        _transacoes.Add(new Transacao(DateTime.Now, TipoTransacao.Saque, valor, "Saque realizado"));
    }

    // Método para exibir as transações realizadas
    public List<Transacao> VerExtrato()
    {
        return _transacoes;
    }
}

// A classe Transacao é usada para registrar os detalhes de cada movimentação bancária.
public class Transacao
{
    public DateTime DataHora { get; set; }
    public TipoTransacao Tipo { get; set; }
    public decimal Valor { get; set; }
    public string Descricao { get; set; }

    public Transacao(DateTime dataHora, TipoTransacao tipo, decimal valor, string descricao)
    {
        DataHora = dataHora;
        Tipo = tipo;
        Valor = valor;
        Descricao = descricao;
    }
}

// Enum para diferenciar os tipos de transação
public enum TipoTransacao
{
    Deposito,
    Saque,
    Transferencia
}

